#!/usr/bin/env python3
# vim: set expandtab tabstop=4 shiftwidth=4:

# Copyright 2021 Christopher J. Kucera
# <cj@apocalyptech.com>
# <http://apocalyptech.com/contact.php>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import re
import sys
import enum
from bl3data.bl3data import BL3Data

# Used to generate some data for https://apocalyptech.com/games/bl3-mayhem/

hotfix_re = re.compile(r'^.*Table_Mayhem2CoreModifierSet,(?P<mayhem_level>\d+),(?P<col>[a-zA-Z0-9_]+),\d+,(?P<prev_val>[-0-9\.]+),(?P<new_val>[-0-9\.]+)"\s*$')

data = BL3Data()

filename = 'mayhem.php'
modsets = [
        ('/Game/PatchDLC/Mayhem2/ModifierSets/ModSet_Mayhem2_EAsy', 'Easy'),
        ('/Game/PatchDLC/Mayhem2/ModifierSets/ModSet_Mayhem2_Medium', 'Medium'),
        ('/Game/PatchDLC/Mayhem2/ModifierSets/ModSet_Mayhem2_Hard', 'Hard'),
        ('/Game/PatchDLC/Mayhem2/ModifierSets/ModSet_Mayhem2_VeryHard', 'Very Hard'),
        ('/Game/PatchDLC/Mayhem2/ModifierSets/ModSet_Mayhem2_Mayhem11', 'Mayhem 11'),
        ]

with open(filename, 'w') as df:
    print("<?php", file=df);
    print("// File generated by gen_mayhem_php.py in Apocalyptech's dataprocessing dir", file=df)
    print("", file=df)

    all_mods = []
    all_pools = []
    pool_map = {}
    default_cats = []
    ms_idx = 0
    for modset_idx, (modset_name, modset_label) in enumerate(modsets):
        modset = data.get_exports(modset_name, 'MayhemModifierSlotDataAsset')[0]
        pool_var_name = 'modset_{}'.format(modset_label.lower().replace(' ', '_'))
        default_cats.append([])

        print("// {} Main Object".format(modset_label), file=df)
        print("${} = new ModSet('{}',".format(
            pool_var_name,
            modset_label,
            ), file=df)
        print("    '{}',".format('{}.{}'.format(modset_name, modset_name.split('/')[-1])), file=df)
        print("    {});".format(modset_idx), file=df)
        print("", file=df)
        all_pools.append(pool_var_name)
        pool_map[modset_name] = pool_var_name

        for ms in modset['ModifierSets']:
            assert(len(ms['UIStats']) == 1)
            uistat_name = ms['UIStats'][0][1]
            uistat = data.get_data(uistat_name)[0]
            ms_name = uistat['Text']['string'].split('] ', 1)[1]
            ms_var_name = ms_name.lower().replace(' ', '_')
            if ms_name == 'Mayhem 11':
                ms_name = '(no modifier)'
            default_cats[-1].append(ms_idx)
            ms_idx += 1
            all_mods.append(ms_var_name)

            print("// {}".format(ms_name), file=df)
            print("${} = new Modifier('{}',".format(ms_var_name, ms_var_name), file=df)
            print("    '{}',".format(ms_name), file=df)
            print("    '{}',".format(modset_label), file=df)
            print("    array(", file=df)
            for ability in ms['Modifiers']:
                print("        new Ability('{}',".format(ability['ModifierAbility']['asset_path_name']), file=df)
                if 'export' in ability['ModifierTarget']:
                    print("            'None'),", file=df)
                else:
                    print("            '{}.{}'),".format(ability['ModifierTarget'][1], ability['ModifierTarget'][1].split('/')[-1]), file=df)
            print("    ),", file=df)
            print("    {},".format(ms['Weight']), file=df)
            print("    array({}),".format(
                ', '.join([f"'{s}'" for s in ms['MutualExclusionTags']]),
                ), file=df)
            print("    '{}.{}');".format(uistat_name, uistat_name.split('/')[-1]), file=df)
            print("", file=df)

    print("$all_modifiers = array(", file=df);
    for s in all_mods:
        print("    ${},".format(s), file=df)
    print("    );", file=df)
    print("", file=df)

    print("$all_modsets = array(", file=df);
    for s in all_pools:
        print("    ${},".format(s), file=df);
    print("    );", file=df)
    print("", file=df)

    # Read in currently-active hotfixes relating to our scaling datatable
    hotfixes = {}
    with open('/home/pez/git/b2patching/bl3hotfixes/hotfixes_current.json') as hfdf:
        for line in hfdf:
            if match := hotfix_re.match(line):
                mayhem_level = int(match.group('mayhem_level'))
                col = match.group('col')
                prev_val = float(match.group('prev_val'))
                new_val = float(match.group('new_val'))
                if mayhem_level not in hotfixes:
                    hotfixes[mayhem_level] = {}
                hotfixes[mayhem_level][col] = (prev_val, new_val)

    # Mayhem level details
    m2levels = data.get_data('/Game/PatchDLC/Mayhem2/OverrideModSet_Mayhem2')[0]
    scaling = data.get_data('/Game/PatchDLC/Mayhem2/Abilities/CoreModifierSets/Table_Mayhem2CoreModifierSet')[0]
    m2data = []
    m2scaling = []
    print("$mayhem_levels = array(", file=df);
    for idx, m2 in enumerate(m2levels['PerLevelOverrides']):
        mayhem_level = idx+1
        m2data.append([])
        tabledata = scaling[str(mayhem_level)]
        assert(tabledata['HealthSimpleScalar_42_0499AACF43FDF39B7084E2BB63E4BF68'] == tabledata['ArmorSimpleScalar_44_BCAAA445479831C25B0D55AF294A15D6'])
        assert(tabledata['HealthSimpleScalar_42_0499AACF43FDF39B7084E2BB63E4BF68'] == tabledata['ShieldSimpleScalar_43_417C36C54DA2550A4CABC7B26A5E24A8'])

        m2scaling.append([])
        for col in [
                'HealthSimpleScalar_42_0499AACF43FDF39B7084E2BB63E4BF68',
                'ExpGainScalar_39_2159F009466933AA733AE688E55B1B93',
                'CashScalar_22_B7B11DC94BBB45C94A96279146EC193E',
                'LootQuality_56_03E220E0495C6B37CD6C7195F5EA289B',
                'PetHealth_84_E5B903B4452F4310CCD13C931474E12B',
                'CompanionHealth_89_294A6BE7439072AE9F934CAA127D8D83',
                'DropWeightCommonScalar_21_59A2FB124E32B955768A7B9D93C25A99',
                'DropWeightUncommonScalar_25_809615334E7F0DB3B8712DAC221015C3',
                'DropWeightRareScalar_27_A09CF5314C51796896A83EA0806C7520',
                'DropWeightVeryRareScalar_29_F2CA570046CD50A7C514EDB0AE1BE591',
                'DropWeightLegendaryScalar_31_D9DA03C54065EA981BE218B11942C24E',
                'DamageScalarActionSkill_60_39AF483140740A38FC71BA897155CBFF',
                'DamageScalarMelee_67_9948929F4FF34364CED2EAB51A881946',
                'DamageScalarSlide_68_B48D0E3A4DF57196839BB58D5AE3E638',
                'DamageScalarSlam_69_15DB6EDC4CCA52620BF25398CFFD9B26',
                'DamageScalarPet_72_0DD7977D44C4A71D0A6B56B7884E023C',
                'DamageScalarEnviornmental_111_E2A582AA47FC000789FC68BBD31D2CFC',
                'DamageScalarPassive_115_6A30229E4CC04F751ED01CB64A71880F',
                'DamageDealtScalarVehicles_103_5739171948322B35CDA36487F78AF0CE',
                'DamageTakenScalarVehicles_104_B75AB4EC482624FDEAAF31B0FA369A77',
                'DamageScalarGear_119_9FC89117424C6619F2CA958FA2842FC2',
                'DropNumberChanceSimpleScalar_40_115637764B3918F01E6FAFADDC005388',
                'DropEridiumChanceSimpleScalar_41_E89AD7E9473FDF3CBED395BA6641FA68',
                ]:
            new_val = tabledata[col]
            if mayhem_level in hotfixes:
                if col in hotfixes[mayhem_level]:
                    if new_val == hotfixes[mayhem_level][col][0]:
                        new_val = hotfixes[mayhem_level][col][1]
                        print('MH {}, {}: {} -> {}'.format(
                            mayhem_level,
                            col,
                            hotfixes[mayhem_level][col][0],
                            hotfixes[mayhem_level][col][1],
                            ))
            m2scaling[-1].append(new_val)

        print("    new MayhemLevel({},".format(mayhem_level), file=df)
        print("        {}, {}, {}, {}, {}, {},".format(*m2scaling[-1][:6]), file=df)
        print("        {}, {}, {}, {}, {},".format(*m2scaling[-1][6:11]), file=df)
        print("        {}, {}, {}, {}, {},".format(*m2scaling[-1][11:16]), file=df)
        print("        {}, {}, {}, {}, {},".format(*m2scaling[-1][16:21]), file=df)
        print("        {}, {},".format(*m2scaling[-1][21:]), file=df)
        print("        array(", file=df)
        for modset in m2['RandomModifierSlotsOverride']:
            print("            ${},".format(pool_map[modset[1]]), file=df)
            m2data[-1].append('${}->index'.format(pool_map[modset[1]]))
        print("            )),", file=df)
    print("    );", file=df)
    print("", file=df)

    # Write out our default config
    print("$default_config = array(", file=df)
    print("    'v' => 1,", file=df)
    print("    'p' => array(", file=df)
    for cat in default_cats:
        print("        array({}),".format(', '.join([str(s) for s in cat])), file=df)
    print("        ),", file=df)
    print("    'l' => array(", file=df)
    for level in m2data:
        print("        array({}),".format(', '.join(level)), file=df)
    print("        ),", file=df)
    print("    's' => array(", file=df)
    for scaling in m2scaling:
        print("        array({}),".format(', '.join([str(s) for s in scaling])), file=df)
    print("        ),", file=df)
    print("    );", file=df)
    print("", file=df)


print('Wrote to {}'.format(filename))
